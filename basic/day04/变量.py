# -*-coding:utf-8-*-
# @作者：haiyu.ma
# @创建日期：2020-09-23 22:21 
# @Software：PyCharm
print()
"""
day03：变量与基本数据类型（*****）
    1.变量
        变量的基本使用:先定义，后引用
            a = 1
            print(a)
        变量的三大组成部分:
            变量名：只指向等号右侧值的内存地址的，用来访问等号右侧的值
            赋值符号：将变量值的内存地址绑定给变量名
            变量值：代表记录的事物状态
        变量名的命名规范:原则：变量名的命名应该见名知意
            1.只能是字母、数字、下划线组成
            2.不能以数字开头
            3.不能使用python内置函数
            ps：不要用拼音，不要用中文，在见名知意的前提下尽可能短
        变量名的命名风格：
            1.纯小写加下划线的方式（在python中，关于变量名的命名推荐使用这种方式）
            2.驼峰命名 
        变量值的三个特征
            id：反映的是变量值的内存地址，内存地址不同id则不同
            print(id(变量名))
            type：不同类型的值表示记录不同的状态
            print(type(变量名))
            值
            print(变量名)

        is与==
            is：比较左右两个值身份id是否相等
            ==：比较左右两个值是否相等
            ps：值相等，id可能不同，即两块不同的内存空间里可以存放相同的值
            id不同的情况下，值有可能相同，即两块不同的内存空间里可以存相同的值
            id相同的情况下，值一定相同，x is y成立，x == y也必然成立
            
        小整数池（了解）：
            从python解释器启动那一刻开始，就会在内存中事先申请好一系列内存空间存放好常用的整数
            python解释器的小整数池【-5,256】(正确要遵循这个小整数池)
            pycharm中的python解释器小整数池范围大于普通的python解释器的小整数池
                >>> x = 'info: Egon: 18'
                >>> y = 'info: Egon: 18'
                >>> print(x, y)
                info: Egon: 18 info: Egon: 18
                >>> print(id(x), id(y))
                4565819264 4566192176
                >>> x is y
                False
                >>> x == y
                True
                
                >>> a=10
                >>> b=10
                >>> a is b
                True
                >>> a==b
                True
                
                >>> a=-6
                >>> b=-6
                >>> a is b
                False  # 在pycharm中，这个结果为TRUE
                >>> a==b
                True
            
        内存管理：垃圾回收机制
            垃圾：当一个变量值被绑定的变量名个数为0时，该变量值无法被访问到，称之为垃圾
        垃圾回收机制之引用计数
            引用计数增加：
                x = 10  # 10的引用计数为1
                y = x   # 10的引用计数为2
                z = x   # 10的引用计数为3
            引用计数减少：
                del x  # 解除变量x与值10的绑定关系，10的引用计数变为2
                print(x)
                del y  # 解除变量x与值10的绑定关系，10的引用计数变为1
                del z  # 解除变量x与值10的绑定关系，10的引用计数变为0

        常量：不变的量
        注意：python语法中没有常量的概念，但是在程序的开发过程中会涉及到常量的概念
        AGE_OF_ALEX = 73  # 小写字母全为大写代表常量，这只是一种约定、规范

"""
